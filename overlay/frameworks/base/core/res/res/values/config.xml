<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2009 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds.  Do not translate. -->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>8</item>
        <item>13</item>
        <item>17</item>
        <item>21</item>
        <item>26</item>
        <item>30</item>
        <item>34</item>
        <item>39</item>
        <item>60</item>
        <item>140</item>
        <item>310</item>
        <item>400</item>
        <item>500</item>
        <item>600</item>
        <item>1000</item>
        <item>1200</item>
        <item>1500</item>
        <item>3000</item>
        <item>3500</item>
        <item>4000</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>15</item>
        <item>30</item>
        <item>30</item>
        <item>30</item>
        <item>30</item>
        <item>30</item>
        <item>51</item>
        <item>56</item>
        <item>56</item>
        <item>57</item>
        <item>59</item>
        <item>63</item>
        <item>72</item>
        <item>78</item>
        <item>82</item>
        <item>87</item>
        <item>109</item>
        <item>121</item>
        <item>136</item>
        <item>200</item>
        <item>240</item>
        <item>255</item>
    </integer-array>

    <!-- Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessButtonBacklightValues">
    </integer-array>

    <!-- Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. -->
    <integer name="config_screenBrightnessDim">3</integer>

    <!-- Default screen brightness setting.
         Must be in the range specified by minimum and maximum. -->
    <integer name="config_screenBrightnessSettingDefault">40</integer>

    <!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">5</integer>

    <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
         for debouncing the light sensor.  Different constants are used to debounce the light sensor
         when adapting to brighter or darker environments.  This parameter controls how quickly
         brightness changes occur in response to an observed change in light level that exceeds the
         hysteresis threshold. -->
    <integer name="config_autoBrightnessBrighteningLightDebounce">1000</integer>
    <integer name="config_autoBrightnessDarkeningLightDebounce">1000</integer>

    <!-- The maximum range of gamma adjustment possible using the screen
         auto-brightness adjustment setting. -->
    <fraction name="config_autoBrightnessAdjustmentMaxGamma">300%</fraction>

    <!-- Period of time in which to consider light samples in milliseconds. -->
    <integer name="config_autoBrightnessAmbientLightHorizon">1000</integer>

    <!-- Hardware keys present on the device, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareKeys">83</integer>

    <!-- Hardware keys present on the device with the ability to wake, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareWakeKeys">65</integer>

    <!-- Button backlight -->
    <bool name="config_button_brightness_support">true</bool>
    <integer name="config_button_brightness_default">255</integer>

    <!-- Device supports SmartPixels -->
    <bool name="config_enableSmartPixels">true</bool>

    <!-- Burn in protection -->
    <bool name="config_statusBarBurnInProtection">true</bool>
    <integer name="config_shift_interval">30</integer>

    <!-- Control whether the always on display mode is available. This should only be enabled on
    devices where the display has be tuned to be power efficient in DOZE and/or DOZE_SUSPEND
    states. -->
    <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>

    <!-- Add Night Display -->
    <bool name="config_nightDisplayAvailable">true</bool>

    <!-- Enable doze mode
    ComponentName of a dream to show whenever the system would otherwise have gone to sleep. -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
    May be less than the minimum allowed brightness setting
    that can be set by the user. -->
    <integer name="config_screenBrightnessDoze">10</integer>

    <!-- If true, the doze component is not started until after the screen has been
    turned off and the screen off animation has been performed. -->
    <bool name="config_dozeAfterScreenOff">true</bool>

    <!-- Power Management: Specifies whether to decouple the interactive state of the
    device from the display on/off state.
    When false, setInteractive(..., true) will be called before the display is turned on
    and setInteractive(..., false) will be called after the display is turned off.
    This mode provides best compatibility for devices that expect the interactive
    state to be tied to the display state.
    When true, setInteractive(...) will be called independently of whether the display
    is being turned on or off.  This mode enables the power manager to reduce
    clocks and disable the touch controller while the display is on.
    This resource should be set to "true" when a doze component has been specified
    to maximize power savings but not all devices support it.
    Refer to power.h for details. -->
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>

    <!-- Whether device supports double tap to wake -->
    <bool name="config_supportDoubleTapWake">true</bool>

    <!-- Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content). -->
    <bool name="config_enableWifiDisplay">true</bool>
</resources>
